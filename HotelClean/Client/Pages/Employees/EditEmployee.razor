@page "/employees/{id:int}/edit"
@using Client.Data.Interfaces;
@using Client.Domain.Model;
@inject IEmployeeRepository employeeRepository;
@inject NavigationManager NavigationManager

<h3>Create Employee</h3>

<EditForm Model="@employee" OnValidSubmit="UpdateEmployee">
    <div class="form-group">
        <label for="name">Nombre</label>
        <InputText id="name" class="form-control" @bind-Value="employee.Name" />
        <ValidationMessage For="@(() => employee.Name)" />
    </div>
    <div class="form-group">
        <label for="lastName">Apellidos</label>
        <InputText id="lastName" class="form-control" @bind-Value="employee.LastName" />
        <ValidationMessage For="@(() => employee.LastName)" />
    </div>
    <div class="form-group">
        <label for="position">Posición</label>
        <select class="form-control" id="position" @bind="employee.Position">
            <option disabled="disabled" selected="selected">Seleccione una opcion.</option>
            <option>Intendencia</option>
            <option>Administracion</option>
        </select>
        <ValidationMessage For="@(() => employee.Position)" />
    </div>
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="employee.Username" />
        <ValidationMessage For="@(() => employee.Username)" />
    </div>
    <div class="form-group">
        <label for="password">Contraseña</label>
        <InputText id="password" class="form-control" @bind-Value="employee.Password" />
        <ValidationMessage For="@(() => employee.Password)" />
    </div>
    <div class="form-group">
        <label for="phoneNumber">Numero de teléfono</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="employee.PhoneNumber" />
        <ValidationMessage For="@(() => employee.PhoneNumber)" />
    </div>
    <button type="submit" class="btn btn-primary">Crear</button>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    private Employee employee = new Employee();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employee = await employeeRepository.GetEmployeeById(id);
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo($"/employees/", forceLoad: true);
        }
    }

    protected async Task UpdateEmployee()
    {
        if (ValidateEmployee())
        {
            try
            {
                await employeeRepository.UpdateEmployee(employee);
                NavigationManager.NavigateTo($"/employees/", forceLoad: true);
            }
            catch (Exception e)
            {

            }
        }
    }

    protected bool ValidateEmployee()
    {
        if (employee.Name.Length > 50 || employee.LastName.Length > 50) return false;
        if (employee.Username is null || employee.Username.Contains(' ') || employee.Username.Length > 20) return false;
        if (employee.Password is null || employee.Password.Length > 20) return false;
        if (employee.Position != "Administracion" && employee.Position != "Intendencia") return false;
        if (employee.PhoneNumber != null && employee.PhoneNumber.Length > 10) return false;
        return true;
    }
}
